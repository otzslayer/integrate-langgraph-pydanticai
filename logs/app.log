{"event": "Will watch for changes in these directories: ['/Users/jayhan/workspaces/integrate-langgraph-pydanticai']", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:26"}
{"event": "Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:26"}
{"event": "Started reloader process [95043] using WatchFiles", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:26"}
{"event": "Started server process [95055]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:27"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:27"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-24 10:58:27", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-24 10:58:27"}
{"question": "모든 임직원의 이름 알려줘.", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "노드 실행: 의도 분류", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "text_to_sql_agent.py", "lineno": 21, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "의도 분류 완료", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "text_to_sql_agent.py", "lineno": 34, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "경로 결정: 의도 분류 이후", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "text_to_sql_agent.py", "lineno": 170, "func_name": "route_after_intent_classification"}
{"event": "노드 실행: SQL 생성", "level": "info", "timestamp": "2025-09-24 10:58:31", "filename": "text_to_sql_agent.py", "lineno": 40, "func_name": "sql_generator_node"}
{"event": "81 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-24 10:58:31"}
{"event": "651 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-24 10:58:32"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-24 10:58:33"}
{"sql_query": "SELECT name FROM employees;", "event": "SQL 생성 성공", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 66, "func_name": "sql_generator_node"}
{"event": "노드 실행: SQL 성찰", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 75, "func_name": "reflection_node"}
{"event": "SQL 쿼리 문법 검사 통과 (EXPLAIN)", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 99, "func_name": "reflection_node"}
{"event": "성찰 결과: 쿼리가 유효함", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 108, "func_name": "reflection_node"}
{"event": "경로 결정: SQL 성찰 이후", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 178, "func_name": "route_after_reflection"}
{"event": "쿼리가 유효하여 SQL 실행기로 라우팅", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 190, "func_name": "route_after_reflection"}
{"sql_query": "SELECT name FROM employees;", "event": "노드 실행: SQL 실행", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 117, "func_name": "sql_executor_node"}
{"result_count": 40, "event": "SQL 실행 성공", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 122, "func_name": "sql_executor_node"}
{"event": "노드 실행: 최종 답변 생성", "level": "info", "timestamp": "2025-09-24 10:58:33", "filename": "text_to_sql_agent.py", "lineno": 131, "func_name": "final_answer_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-24 10:58:36"}
{"final_answer": "모든 임직원의 이름은 다음과 같습니다: Alice, Bob, Charlie, David, Employee_5, Employee_6, Employee_7, Employee_8, Employee_9, Employee_10, Employee_11, Employee_12, Employee_13, Employee_14, Employee_15, Employee_16, Employee_17, Employee_18, Employee_19, Employee_20, Employee_21, Employee_22, Employee_23, Employee_24, Employee_25, Employee_26, Employee_27, Employee_28, Employee_29, Employee_30, Employee_31, Employee_32, Employee_33, Employee_34, Employee_35, Employee_36, Employee_37, Employee_38, Employee_39, Employee_40입니다.", "event": "최종 답변 생성 완료", "level": "info", "timestamp": "2025-09-24 10:58:36", "filename": "text_to_sql_agent.py", "lineno": 160, "func_name": "final_answer_node"}
{"final_answer": "모든 임직원의 이름은 다음과 같습니다: Alice, Bob, Charlie, David, Employee_5, Employee_6, Employee_7, Employee_8, Employee_9, Employee_10, Employee_11, Employee_12, Employee_13, Employee_14, Employee_15, Employee_16, Employee_17, Employee_18, Employee_19, Employee_20, Employee_21, Employee_22, Employee_23, Employee_24, Employee_25, Employee_26, Employee_27, Employee_28, Employee_29, Employee_30, Employee_31, Employee_32, Employee_33, Employee_34, Employee_35, Employee_36, Employee_37, Employee_38, Employee_39, Employee_40입니다.", "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-24 10:58:36", "filename": "endpoints.py", "lineno": 48, "func_name": "invoke_agent"}
{"event": "Will watch for changes in these directories: ['/Users/jayhan/workspaces/integrate-langgraph-pydanticai']", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:36"}
{"event": "Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:36"}
{"event": "Started reloader process [29757] using WatchFiles", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:36"}
{"event": "Started server process [29769]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:37"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:37"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:19:37", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:19:37"}
{"question": "string", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:19:52", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:19:52", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"error": "[Errno 61] Connection refused", "event": "데이터베이스 스키마 조회 중 오류 발생", "level": "error", "timestamp": "2025-09-25 13:19:52", "filename": "utils.py", "lineno": 42, "func_name": "get_db_schema", "exception": [{"exc_type": "ConnectionRefusedError", "exc_value": "[Errno 61] Connection refused", "exc_notes": [], "syntax_error": null, "is_cause": false, "frames": [{"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/database/utils.py", "lineno": 14, "name": "get_db_schema", "locals": {"session": "<sqlalchemy.orm.session.AsyncSession object at 0x10c6477d0>", "e": "ConnectionRefusedError(61, 'Connection refused')"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py", "lineno": 463, "name": "execute", "locals": {"self": "<sqlalchemy.orm.session.AsyncSession object at 0x10c6477d0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "None", "kw": "{}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 201, "name": "greenlet_spawn", "locals": {"fn": "<bound method Session.execute of <sqlalchemy.orm.session.Session object at 0x10c6478c0>>", "_require_await": "False", "args": "(<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>,)", "kwargs": "{\n    'params': None,\n    'execution_options': immutabledict({'prebuffer_rows': True}),\n    'bind_arguments': None\n}", "context": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>", "switch_occurred": "True", "result": "<coroutine object connect at 0x10c4fdfc0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2365, "name": "execute", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "None", "_parent_execute_state": "None", "_add_event": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2241, "name": "_execute_internal", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "{'clause': <sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>}", "_parent_execute_state": "None", "_add_event": "None", "_scalar_result": "False", "compile_state_cls": "None", "events_todo": "<sqlalchemy.event.attr._EmptyListener object at 0x10c66e7c0>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2110, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "engine": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None", "kw": "{}", "trans": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>"}}, {"filename": "<string>", "lineno": 2, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py", "lineno": 137, "name": "_go", "locals": {"fn": "<function SessionTransaction._connection_for_bind at 0x10a2d0cc0>", "self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "arg": "(Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql), None)", "kw": "{}", "current_state": "<SessionTransactionState.ACTIVE: 1>", "next_state": "<_StateChangeStates.ANY: 1>", "existing_fn": "None", "expect_state": "<SessionTransactionState.ACTIVE: 1>", "expect_state_change": "False", "has_prerequisite_states": "True", "moves_to": "<_StateChangeStates.NO_CHANGE: 2>", "prerequisite_state_collection": "(<SessionTransactionState.ACTIVE: 1>,)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 1189, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None", "local_connect": "False", "should_commit": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 3277, "name": "connect", "locals": {"self": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 143, "name": "__init__", "locals": {"self": "<sqlalchemy.engine.base.Connection object at 0x10c6479b0>", "engine": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "connection": "None", "_has_events": "None", "_allow_revalidate": "True", "_allow_autobegin": "True", "dialect": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 3301, "name": "raw_connection", "locals": {"self": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 447, "name": "connect", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 1264, "name": "_checkout", "locals": {"cls": "<class 'sqlalchemy.pool.base._ConnectionFairy'>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "threadconns": "None", "fairy": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 711, "name": "checkout", "locals": {"cls": "<class 'sqlalchemy.pool.base._ConnectionRecord'>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py", "lineno": 177, "name": "_do_get", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "use_overflow": "True", "wait": "False"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py", "lineno": 224, "name": "__exit__", "locals": {"self": "<sqlalchemy.util.langhelpers.safe_reraise object at 0x10bce83d0>", "type_": "None", "value": "None", "traceback": "None", "exc_type": "<class 'ConnectionRefusedError'>", "exc_value": "ConnectionRefusedError(61, 'Connection refused')", "exc_tb": "<traceback object at 0x10c67dec0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py", "lineno": 175, "name": "_do_get", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "use_overflow": "True", "wait": "False"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 388, "name": "_create_connection", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 673, "name": "__init__", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "connect": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 899, "name": "__connect", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py", "lineno": 224, "name": "__exit__", "locals": {"self": "<sqlalchemy.util.langhelpers.safe_reraise object at 0x10c551cf0>", "type_": "None", "value": "None", "traceback": "None", "exc_type": "<class 'ConnectionRefusedError'>", "exc_value": "ConnectionRefusedError(61, 'Connection refused')", "exc_tb": "<traceback object at 0x10c67de00>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 895, "name": "__connect", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py", "lineno": 661, "name": "connect", "locals": {"connection_record": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "cargs": "[]", "cparams": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}", "dialect": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py", "lineno": 629, "name": "connect", "locals": {"self": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>", "cargs": "()", "cparams": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py", "lineno": 964, "name": "connect", "locals": {"self": "<sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi object at 0x10845ca70>", "arg": "()", "kw": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}", "async_fallback": "False", "creator_fn": "<function connect at 0x10a570680>", "prepared_statement_cache_size": "100", "prepared_statement_name_func": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 132, "name": "await_only", "locals": {"awaitable": "<coroutine object connect at 0x10c4fdfc0>", "current": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 196, "name": "greenlet_spawn", "locals": {"fn": "<bound method Session.execute of <sqlalchemy.orm.session.Session object at 0x10c6478c0>>", "_require_await": "False", "args": "(<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>,)", "kwargs": "{\n    'params': None,\n    'execution_options': immutabledict({'prebuffer_rows': True}),\n    'bind_arguments': None\n}", "context": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>", "switch_occurred": "True", "result": "<coroutine object connect at 0x10c4fdfc0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connection.py", "lineno": 2421, "name": "connect", "locals": {"dsn": "None", "host": "'localhost'", "port": "5432", "user": "'myuser'", "password": "'mypassword'", "passfile": "None", "database": "'text2sql'", "loop": "<uvloop.Loop running=True closed=False debug=False>", "timeout": "60", "statement_cache_size": "100", "max_cached_statement_lifetime": "300", "max_cacheable_statement_size": "15360", "command_timeout": "None", "ssl": "None", "direct_tls": "None", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "server_settings": "None", "target_session_attrs": "None", "krbsrvname": "None", "gsslib": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 1075, "name": "_connect", "locals": {"loop": "<uvloop.Loop running=True closed=False debug=False>", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "kwargs": "{\n    'dsn': None,\n    'host': 'localhost',\n    'port': 5432,\n    'user': 'myuser',\n    'password': 'mypassword',\n    'passfile': None,\n    'ssl': None,\n    'direct_tls': None,\n    'database': 'text2sql',\n    'server_settings': None,\n    ... +7\n}", "addrs": "[('localhost', 5432)]", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "target_attr": "<SessionAttribute.any: 'any'>", "candidates": "[]", "last_error": "ConnectionRefusedError(61, 'Connection refused')", "addr": "('localhost', 5432)", "chosen_connection": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 1049, "name": "_connect", "locals": {"loop": "<uvloop.Loop running=True closed=False debug=False>", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "kwargs": "{\n    'dsn': None,\n    'host': 'localhost',\n    'port': 5432,\n    'user': 'myuser',\n    'password': 'mypassword',\n    'passfile': None,\n    'ssl': None,\n    'direct_tls': None,\n    'database': 'text2sql',\n    'server_settings': None,\n    ... +7\n}", "addrs": "[('localhost', 5432)]", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "target_attr": "<SessionAttribute.any: 'any'>", "candidates": "[]", "last_error": "ConnectionRefusedError(61, 'Connection refused')", "addr": "('localhost', 5432)", "chosen_connection": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 886, "name": "_connect_addr", "locals": {"addr": "('localhost', 5432)", "loop": "<uvloop.Loop running=True closed=False debug=False>", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "params_input": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "args": "(\n    ('localhost', 5432),\n    <uvloop.Loop running=True closed=False debug=False>,\n    ConnectionConfiguration(\n        command_timeout=None,\n        statement_cache_size=100,\n        max_cached_statement_lifetime=300,\n        max_cacheable_statement_size=15360\n    ),\n    <class 'asyncpg.connection.Connection'>,\n    <class 'asyncpg.Record'>,\n    ConnectionParameters(\n        user='myuser',\n        password='mypassword',\n        database='text2sql',\n        ssl=<ssl.SSLContext object at 0x10c6759d0>,\n        sslmode=<SSLMode.prefer: 2>,\n        ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n        server_settings=None,\n        target_session_attrs=<SessionAttribute.any: 'any'>,\n        krbsrvname=None,\n        gsslib='gssapi'\n    )\n)", "params_retry": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=None,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 931, "name": "__connect_addr", "locals": {"params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "retry": "True", "addr": "('localhost', 5432)", "loop": "<uvloop.Loop running=True closed=False debug=False>", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "params_input": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "proto_factory": "<function __connect_addr.<locals>.<lambda> at 0x10c671c60>", "connector": "<coroutine object _create_ssl_connection at 0x10c4d65c0>", "connected": "<Future pending>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 802, "name": "_create_ssl_connection", "locals": {"protocol_factory": "<function __connect_addr.<locals>.<lambda> at 0x10c671c60>", "host": "'localhost'", "port": "5432", "loop": "<uvloop.Loop running=True closed=False debug=False>", "ssl_context": "<ssl.SSLContext object at 0x10c6759d0>", "ssl_is_advisory": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/uvloop/loop.pyx", "lineno": 2043, "name": "create_connection", "locals": {}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/uvloop/loop.pyx", "lineno": 2020, "name": "uvloop.loop.Loop.create_connection", "locals": {}}], "is_group": false, "exceptions": []}]}
{"error": "[Errno 61] Connection refused", "event": "에이전트 실행 중 심각한 오류 발생", "level": "error", "timestamp": "2025-09-25 13:19:53", "filename": "endpoints.py", "lineno": 55, "func_name": "invoke_agent", "exception": [{"exc_type": "ConnectionRefusedError", "exc_value": "[Errno 61] Connection refused", "exc_notes": [], "syntax_error": null, "is_cause": false, "frames": [{"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/api/endpoints.py", "lineno": 29, "name": "invoke_agent", "locals": {"request": "QueryRequest(question='string')", "db_session": "<sqlalchemy.orm.session.AsyncSession object at 0x10c6477d0>", "e": "ConnectionRefusedError(61, 'Connection refused')"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/database/utils.py", "lineno": 14, "name": "get_db_schema", "locals": {"session": "<sqlalchemy.orm.session.AsyncSession object at 0x10c6477d0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py", "lineno": 463, "name": "execute", "locals": {"self": "<sqlalchemy.orm.session.AsyncSession object at 0x10c6477d0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "None", "kw": "{}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 201, "name": "greenlet_spawn", "locals": {"fn": "<bound method Session.execute of <sqlalchemy.orm.session.Session object at 0x10c6478c0>>", "_require_await": "False", "args": "(<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>,)", "kwargs": "{\n    'params': None,\n    'execution_options': immutabledict({'prebuffer_rows': True}),\n    'bind_arguments': None\n}", "context": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>", "switch_occurred": "True", "result": "<coroutine object connect at 0x10c4fdfc0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2365, "name": "execute", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "None", "_parent_execute_state": "None", "_add_event": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2241, "name": "_execute_internal", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "statement": "<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>", "params": "None", "execution_options": "immutabledict({'prebuffer_rows': True})", "bind_arguments": "{'clause': <sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>}", "_parent_execute_state": "None", "_add_event": "None", "_scalar_result": "False", "compile_state_cls": "None", "events_todo": "<sqlalchemy.event.attr._EmptyListener object at 0x10c66e7c0>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 2110, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.Session object at 0x10c6478c0>", "engine": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None", "kw": "{}", "trans": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>"}}, {"filename": "<string>", "lineno": 2, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py", "lineno": 137, "name": "_go", "locals": {"fn": "<function SessionTransaction._connection_for_bind at 0x10a2d0cc0>", "self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "arg": "(Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql), None)", "kw": "{}", "current_state": "<SessionTransactionState.ACTIVE: 1>", "next_state": "<_StateChangeStates.ANY: 1>", "existing_fn": "None", "expect_state": "<SessionTransactionState.ACTIVE: 1>", "expect_state_change": "False", "has_prerequisite_states": "True", "moves_to": "<_StateChangeStates.NO_CHANGE: 2>", "prerequisite_state_collection": "(<SessionTransactionState.ACTIVE: 1>,)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", "lineno": 1189, "name": "_connection_for_bind", "locals": {"self": "<sqlalchemy.orm.session.SessionTransaction object at 0x10c5f6390>", "bind": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "execution_options": "None", "local_connect": "False", "should_commit": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 3277, "name": "connect", "locals": {"self": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 143, "name": "__init__", "locals": {"self": "<sqlalchemy.engine.base.Connection object at 0x10c6479b0>", "engine": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)", "connection": "None", "_has_events": "None", "_allow_revalidate": "True", "_allow_autobegin": "True", "dialect": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", "lineno": 3301, "name": "raw_connection", "locals": {"self": "Engine(postgresql+asyncpg://myuser:***@localhost:5432/text2sql)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 447, "name": "connect", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 1264, "name": "_checkout", "locals": {"cls": "<class 'sqlalchemy.pool.base._ConnectionFairy'>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "threadconns": "None", "fairy": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 711, "name": "checkout", "locals": {"cls": "<class 'sqlalchemy.pool.base._ConnectionRecord'>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py", "lineno": 177, "name": "_do_get", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "use_overflow": "True", "wait": "False"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py", "lineno": 224, "name": "__exit__", "locals": {"self": "<sqlalchemy.util.langhelpers.safe_reraise object at 0x10bce83d0>", "type_": "None", "value": "None", "traceback": "None", "exc_type": "<class 'ConnectionRefusedError'>", "exc_value": "ConnectionRefusedError(61, 'Connection refused')", "exc_tb": "<traceback object at 0x10c67dec0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py", "lineno": 175, "name": "_do_get", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "use_overflow": "True", "wait": "False"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 388, "name": "_create_connection", "locals": {"self": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 673, "name": "__init__", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>", "connect": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 899, "name": "__connect", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py", "lineno": 224, "name": "__exit__", "locals": {"self": "<sqlalchemy.util.langhelpers.safe_reraise object at 0x10c551cf0>", "type_": "None", "value": "None", "traceback": "None", "exc_type": "<class 'ConnectionRefusedError'>", "exc_value": "ConnectionRefusedError(61, 'Connection refused')", "exc_tb": "<traceback object at 0x10c67de00>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py", "lineno": 895, "name": "__connect", "locals": {"self": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "pool": "<sqlalchemy.pool.impl.AsyncAdaptedQueuePool object at 0x10a5061b0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py", "lineno": 661, "name": "connect", "locals": {"connection_record": "<sqlalchemy.pool.base._ConnectionRecord object at 0x10c5ff770>", "cargs": "[]", "cparams": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}", "dialect": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py", "lineno": 629, "name": "connect", "locals": {"self": "<sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x10845caa0>", "cargs": "()", "cparams": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py", "lineno": 964, "name": "connect", "locals": {"self": "<sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi object at 0x10845ca70>", "arg": "()", "kw": "{\n    'host': 'localhost',\n    'database': 'text2sql',\n    'user': 'myuser',\n    'password': 'mypassword',\n    'port': 5432\n}", "async_fallback": "False", "creator_fn": "<function connect at 0x10a570680>", "prepared_statement_cache_size": "100", "prepared_statement_name_func": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 132, "name": "await_only", "locals": {"awaitable": "<coroutine object connect at 0x10c4fdfc0>", "current": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py", "lineno": 196, "name": "greenlet_spawn", "locals": {"fn": "<bound method Session.execute of <sqlalchemy.orm.session.Session object at 0x10c6478c0>>", "_require_await": "False", "args": "(<sqlalchemy.sql.elements.TextClause object at 0x10c3d7860>,)", "kwargs": "{\n    'params': None,\n    'execution_options': immutabledict({'prebuffer_rows': True}),\n    'bind_arguments': None\n}", "context": "<_AsyncIoGreenlet object at 0x10c5e5000 (otid=0x10973e250) dead>", "switch_occurred": "True", "result": "<coroutine object connect at 0x10c4fdfc0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connection.py", "lineno": 2421, "name": "connect", "locals": {"dsn": "None", "host": "'localhost'", "port": "5432", "user": "'myuser'", "password": "'mypassword'", "passfile": "None", "database": "'text2sql'", "loop": "<uvloop.Loop running=True closed=False debug=False>", "timeout": "60", "statement_cache_size": "100", "max_cached_statement_lifetime": "300", "max_cacheable_statement_size": "15360", "command_timeout": "None", "ssl": "None", "direct_tls": "None", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "server_settings": "None", "target_session_attrs": "None", "krbsrvname": "None", "gsslib": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 1075, "name": "_connect", "locals": {"loop": "<uvloop.Loop running=True closed=False debug=False>", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "kwargs": "{\n    'dsn': None,\n    'host': 'localhost',\n    'port': 5432,\n    'user': 'myuser',\n    'password': 'mypassword',\n    'passfile': None,\n    'ssl': None,\n    'direct_tls': None,\n    'database': 'text2sql',\n    'server_settings': None,\n    ... +7\n}", "addrs": "[('localhost', 5432)]", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "target_attr": "<SessionAttribute.any: 'any'>", "candidates": "[]", "last_error": "ConnectionRefusedError(61, 'Connection refused')", "addr": "('localhost', 5432)", "chosen_connection": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 1049, "name": "_connect", "locals": {"loop": "<uvloop.Loop running=True closed=False debug=False>", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "kwargs": "{\n    'dsn': None,\n    'host': 'localhost',\n    'port': 5432,\n    'user': 'myuser',\n    'password': 'mypassword',\n    'passfile': None,\n    'ssl': None,\n    'direct_tls': None,\n    'database': 'text2sql',\n    'server_settings': None,\n    ... +7\n}", "addrs": "[('localhost', 5432)]", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "target_attr": "<SessionAttribute.any: 'any'>", "candidates": "[]", "last_error": "ConnectionRefusedError(61, 'Connection refused')", "addr": "('localhost', 5432)", "chosen_connection": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 886, "name": "_connect_addr", "locals": {"addr": "('localhost', 5432)", "loop": "<uvloop.Loop running=True closed=False debug=False>", "params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "params_input": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "args": "(\n    ('localhost', 5432),\n    <uvloop.Loop running=True closed=False debug=False>,\n    ConnectionConfiguration(\n        command_timeout=None,\n        statement_cache_size=100,\n        max_cached_statement_lifetime=300,\n        max_cacheable_statement_size=15360\n    ),\n    <class 'asyncpg.connection.Connection'>,\n    <class 'asyncpg.Record'>,\n    ConnectionParameters(\n        user='myuser',\n        password='mypassword',\n        database='text2sql',\n        ssl=<ssl.SSLContext object at 0x10c6759d0>,\n        sslmode=<SSLMode.prefer: 2>,\n        ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n        server_settings=None,\n        target_session_attrs=<SessionAttribute.any: 'any'>,\n        krbsrvname=None,\n        gsslib='gssapi'\n    )\n)", "params_retry": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=None,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 931, "name": "__connect_addr", "locals": {"params": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "retry": "True", "addr": "('localhost', 5432)", "loop": "<uvloop.Loop running=True closed=False debug=False>", "config": "ConnectionConfiguration(\n    command_timeout=None,\n    statement_cache_size=100,\n    max_cached_statement_lifetime=300,\n    max_cacheable_statement_size=15360\n)", "connection_class": "<class 'asyncpg.connection.Connection'>", "record_class": "<class 'asyncpg.Record'>", "params_input": "ConnectionParameters(\n    user='myuser',\n    password='mypassword',\n    database='text2sql',\n    ssl=<ssl.SSLContext object at 0x10c6759d0>,\n    sslmode=<SSLMode.prefer: 2>,\n    ssl_negotiation=<SSLNegotiation.postgres: 'postgres'>,\n    server_settings=None,\n    target_session_attrs=<SessionAttribute.any: 'any'>,\n    krbsrvname=None,\n    gsslib='gssapi'\n)", "proto_factory": "<function __connect_addr.<locals>.<lambda> at 0x10c671c60>", "connector": "<coroutine object _create_ssl_connection at 0x10c4d65c0>", "connected": "<Future pending>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py", "lineno": 802, "name": "_create_ssl_connection", "locals": {"protocol_factory": "<function __connect_addr.<locals>.<lambda> at 0x10c671c60>", "host": "'localhost'", "port": "5432", "loop": "<uvloop.Loop running=True closed=False debug=False>", "ssl_context": "<ssl.SSLContext object at 0x10c6759d0>", "ssl_is_advisory": "True"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/uvloop/loop.pyx", "lineno": 2043, "name": "create_connection", "locals": {}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/uvloop/loop.pyx", "lineno": 2020, "name": "uvloop.loop.Loop.create_connection", "locals": {}}], "is_group": false, "exceptions": []}]}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:07"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:07"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:20:07", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:07"}
{"event": "Finished server process [29769]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:07"}
{"event": "Stopping reloader process [29757]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:07"}
{"event": "Will watch for changes in these directories: ['/Users/jayhan/workspaces/integrate-langgraph-pydanticai']", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:49"}
{"event": "Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:49"}
{"event": "Started reloader process [30375] using WatchFiles", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:49"}
{"event": "Started server process [30381]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:51"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:51"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:20:51", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:20:51"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:21:01", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:21:01", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 13:21:01", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 13:21:01", "filename": "text_to_sql_agent.py", "lineno": 73, "func_name": "intent_classifier_node"}
{"intent": "unknown", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 13:21:01", "filename": "text_to_sql_agent.py", "lineno": 86, "func_name": "intent_classifier_node"}
{"error": "'intent'", "event": "에이전트 실행 중 심각한 오류 발생", "level": "error", "timestamp": "2025-09-25 13:21:01", "filename": "endpoints.py", "lineno": 55, "func_name": "invoke_agent", "exception": [{"exc_type": "KeyError", "exc_value": "'intent'", "exc_notes": ["During task with name 'intent_classifier' and id '50cf300f-0393-6ed4-0605-bb93aca3b199'"], "syntax_error": null, "is_cause": false, "frames": [{"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/api/endpoints.py", "lineno": 45, "name": "invoke_agent", "locals": {"request": "QueryRequest(question='임직원 목록 조회')", "db_session": "<sqlalchemy.orm.session.AsyncSession object at 0x10fda20f0>", "schema": "'Table departments:\\n  - id integer\\n  - name text\\n  - manager text\\nTable employee_'+127", "initial_state": "{\n    'question': '임직원 목록 조회',\n    'db_schema': 'Table departments:\\n  - id integer\\n  - name text\\n  - manager text\\nTable employee_'+127,\n    'db_connection': <sqlalchemy.orm.session.AsyncSession object at 0x10fda20f0>,\n    'reflection_history': [],\n    'intent': None,\n    'sql_query': None,\n    'reflection': [],\n    'execution_result': None,\n    'final_answer': None,\n    'messages': [],\n    ... +1\n}", "e": "KeyError('intent')"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/pregel/main.py", "lineno": 3112, "name": "ainvoke", "locals": {"self": "<langgraph.graph.state.CompiledStateGraph object at 0x10fd3e3c0>", "input": "{\n    'question': '임직원 목록 조회',\n    'db_schema': 'Table departments:\\n  - id integer\\n  - name text\\n  - manager text\\nTable employee_'+127,\n    'db_connection': <sqlalchemy.orm.session.AsyncSession object at 0x10fda20f0>,\n    'reflection_history': [],\n    'intent': None,\n    'sql_query': None,\n    'reflection': [],\n    'execution_result': None,\n    'final_answer': None,\n    'messages': [],\n    ... +1\n}", "config": "None", "context": "None", "stream_mode": "'values'", "print_mode": "()", "output_keys": "['question', 'answer', 'is_final', 'messages', 'revision_needed', 'thoughts']", "interrupt_before": "None", "interrupt_after": "None", "durability": "None", "kwargs": "{}", "latest": "{'question': '임직원 목록 조회', 'messages': [], 'thoughts': []}", "chunks": "[]", "interrupts": "[]", "chunk": "('values', {'question': '임직원 목록 조회', 'messages': [], 'thoughts': []})", "mode": "'values'", "payload": "{'question': '임직원 목록 조회', 'messages': [], 'thoughts': []}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/pregel/main.py", "lineno": 2939, "name": "astream", "locals": {"self": "<langgraph.graph.state.CompiledStateGraph object at 0x10fd3e3c0>", "input": "{\n    'question': '임직원 목록 조회',\n    'db_schema': 'Table departments:\\n  - id integer\\n  - name text\\n  - manager text\\nTable employee_'+127,\n    'db_connection': <sqlalchemy.orm.session.AsyncSession object at 0x10fda20f0>,\n    'reflection_history': [],\n    'intent': None,\n    'sql_query': None,\n    'reflection': [],\n    'execution_result': None,\n    'final_answer': None,\n    'messages': [],\n    ... +1\n}", "config": "{\n    'tags': [],\n    'metadata': ChainMap({}),\n    'callbacks': None,\n    'recursion_limit': 25,\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        )\n    }\n}", "context": "None", "stream_mode": "['updates', 'values']", "print_mode": "()", "output_keys": "['question', 'answer', 'is_final', 'messages', 'revision_needed', 'thoughts']", "interrupt_before": "None", "interrupt_after": "None", "durability": "None", "subgraphs": "False", "debug": "None", "kwargs": "{}", "checkpoint_during": "None", "stream_put": "functools.partial(<bound method Loop.call_soon_threadsafe of <uvloop.Loop running=True closed=False debug=False>>, <bound method Queue.put_nowait of <AsyncQueue at 0x10fd0e930 maxsize=0 _queue=[((), 'updates', {'intent_classifier': {'thoughts': [], 'messages': []}})] tasks=2>>)", "callback_manager": "<langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda2d20>", "run_manager": "<langchain_core.callbacks.manager.AsyncCallbackManagerForChainRun object at 0x10fae5fa0>", "do_stream": "False", "stream_modes": "{'updates', 'values'}", "interrupt_before_": "[]", "interrupt_after_": "[]", "checkpointer": "None", "store": "None", "cache": "None", "durability_": "'async'", "stream_writer": "<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>", "runtime": "Runtime(\n    context=None,\n    store=None,\n    stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n    previous=None\n)", "parent_runtime": "Runtime(\n    context=None,\n    store=None,\n    stream_writer=<function _no_op_stream_writer at 0x10e513d80>,\n    previous=None\n)", "loop": "<langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>", "runner": "<langgraph.pregel._runner.PregelRunner object at 0x10fda2ea0>", "get_waiter": "None", "_": "None", "o": "('values', {'question': '임직원 목록 조회', 'messages': [], 'thoughts': []})", "aioloop": "<uvloop.Loop running=True closed=False debug=False>", "stream": "<AsyncQueue at 0x10fd0e930 maxsize=0 _queue=[((), 'updates', {'intent_classifier': {'thoughts': [], 'messages': []}})] tasks=2>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/pregel/_runner.py", "lineno": 295, "name": "atick", "locals": {"self": "<langgraph.pregel._runner.PregelRunner object at 0x10fda2ea0>", "tasks": "(\n    PregelExecutableTask(\n        name='intent_classifier',\n        input={'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},\n        proc=<langgraph._internal._runnable.RunnableSeq object at 0x10fda3110>,\n        writes=deque([\n            ('thoughts', []),\n            ('messages', []),\n            ('__error__', KeyError('intent'))\n        ]),\n        config={\n            'configurable': {\n                '__pregel_runtime': Runtime(\n                    context=None,\n                    store=None,\n                    stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n                    previous=None\n                ),\n                '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n                '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n                '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n                '__pregel_checkpointer': None,\n                'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n                'checkpoint_id': None,\n                'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n                '__pregel_scratchpad': PregelScratchpad(\n                    step=1,\n                    stop=25,\n                    call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n                    interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n                    get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n                    resume=[],\n                    subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n                )\n            },\n            'metadata': {\n                'langgraph_step': 1,\n                'langgraph_node': 'intent_classifier',\n                'langgraph_triggers': ('branch:to:intent_classifier',),\n                'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n                'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n            },\n            'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda3140>,\n            'run_name': 'intent_classifier'\n        },\n        triggers=('branch:to:intent_classifier',),\n        retry_policy=(),\n        cache_key=None,\n        id='50cf300f-0393-6ed4-0605-bb93aca3b199',\n        path=('__pregel_pull', 'intent_classifier'),\n        writers=[\n            ChannelWrite<...,...>(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, writes=(ChannelWriteTupleEntry(mapper=<function CompiledStateGraph.attach_node.<locals>._get_updates at 0x10fd3bec0>, value=<object object at 0x10dbe9cd0>, static=None), ChannelWriteTupleEntry(mapper=<function _control_branch at 0x10e5ba5c0>, value=<object object at 0x10dbe9cd0>, static=[]))),\n            _route(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, _is_channel_writer=[(ChannelWriteEntry(channel='branch:to:sql_generator', value=None, skip_none=False, mapper=None), 'sql_generator'), (ChannelWriteEntry(channel='branch:to:final_answer', value=None, skip_none=False, mapper=None), 'final_answer')])\n        ],\n        subgraphs=[]\n    ),\n)", "reraise": "True", "timeout": "None", "retry_policy": "None", "get_waiter": "None", "schedule_task": "<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>", "loop": "<uvloop.Loop running=True closed=False debug=False>", "futures": "{}", "t": "PregelExecutableTask(\n    name='intent_classifier',\n    input={'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},\n    proc=<langgraph._internal._runnable.RunnableSeq object at 0x10fda3110>,\n    writes=deque([\n        ('thoughts', []),\n        ('messages', []),\n        ('__error__', KeyError('intent'))\n    ]),\n    config={\n        'configurable': {\n            '__pregel_runtime': Runtime(\n                context=None,\n                store=None,\n                stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n                previous=None\n            ),\n            '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n            '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n            '__pregel_checkpointer': None,\n            'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n            'checkpoint_id': None,\n            'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_scratchpad': PregelScratchpad(\n                step=1,\n                stop=25,\n                call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n                interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n                get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n                resume=[],\n                subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n            )\n        },\n        'metadata': {\n            'langgraph_step': 1,\n            'langgraph_node': 'intent_classifier',\n            'langgraph_triggers': ('branch:to:intent_classifier',),\n            'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n            'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n        },\n        'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda3140>,\n        'run_name': 'intent_classifier'\n    },\n    triggers=('branch:to:intent_classifier',),\n    retry_policy=(),\n    cache_key=None,\n    id='50cf300f-0393-6ed4-0605-bb93aca3b199',\n    path=('__pregel_pull', 'intent_classifier'),\n    writers=[\n        ChannelWrite<...,...>(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, writes=(ChannelWriteTupleEntry(mapper=<function CompiledStateGraph.attach_node.<locals>._get_updates at 0x10fd3bec0>, value=<object object at 0x10dbe9cd0>, static=None), ChannelWriteTupleEntry(mapper=<function _control_branch at 0x10e5ba5c0>, value=<object object at 0x10dbe9cd0>, static=[]))),\n        _route(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, _is_channel_writer=[(ChannelWriteEntry(channel='branch:to:sql_generator', value=None, skip_none=False, mapper=None), 'sql_generator'), (ChannelWriteEntry(channel='branch:to:final_answer', value=None, skip_none=False, mapper=None), 'final_answer')])\n    ],\n    subgraphs=[]\n)", "tb": "<traceback object at 0x10fdc4fc0>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/pregel/_retry.py", "lineno": 137, "name": "arun_with_retry", "locals": {"task": "PregelExecutableTask(\n    name='intent_classifier',\n    input={'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},\n    proc=<langgraph._internal._runnable.RunnableSeq object at 0x10fda3110>,\n    writes=deque([\n        ('thoughts', []),\n        ('messages', []),\n        ('__error__', KeyError('intent'))\n    ]),\n    config={\n        'configurable': {\n            '__pregel_runtime': Runtime(\n                context=None,\n                store=None,\n                stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n                previous=None\n            ),\n            '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n            '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n            '__pregel_checkpointer': None,\n            'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n            'checkpoint_id': None,\n            'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_scratchpad': PregelScratchpad(\n                step=1,\n                stop=25,\n                call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n                interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n                get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n                resume=[],\n                subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n            )\n        },\n        'metadata': {\n            'langgraph_step': 1,\n            'langgraph_node': 'intent_classifier',\n            'langgraph_triggers': ('branch:to:intent_classifier',),\n            'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n            'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n        },\n        'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda3140>,\n        'run_name': 'intent_classifier'\n    },\n    triggers=('branch:to:intent_classifier',),\n    retry_policy=(),\n    cache_key=None,\n    id='50cf300f-0393-6ed4-0605-bb93aca3b199',\n    path=('__pregel_pull', 'intent_classifier'),\n    writers=[\n        ChannelWrite<...,...>(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, writes=(ChannelWriteTupleEntry(mapper=<function CompiledStateGraph.attach_node.<locals>._get_updates at 0x10fd3bec0>, value=<object object at 0x10dbe9cd0>, static=None), ChannelWriteTupleEntry(mapper=<function _control_branch at 0x10e5ba5c0>, value=<object object at 0x10dbe9cd0>, static=[]))),\n        _route(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, _is_channel_writer=[(ChannelWriteEntry(channel='branch:to:sql_generator', value=None, skip_none=False, mapper=None), 'sql_generator'), (ChannelWriteEntry(channel='branch:to:final_answer', value=None, skip_none=False, mapper=None), 'final_answer')])\n    ],\n    subgraphs=[]\n)", "retry_policy": "None", "stream": "False", "match_cached_writes": "None", "configurable": "{\n    '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n}", "attempts": "0", "config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda3140>,\n    'run_name': 'intent_classifier'\n}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/_internal/_runnable.py", "lineno": 712, "name": "ainvoke", "locals": {"self": "<langgraph._internal._runnable.RunnableSeq object at 0x10fda3110>", "input": "{'intent': 'unknown', 'thoughts': [], 'messages': []}", "config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n}", "kwargs": "{}", "callback_manager": "<langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda3140>", "run_manager": "<langchain_core.callbacks.manager.AsyncCallbackManagerForChainRun object at 0x10fda3170>", "i": "2", "step": "_route(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, _is_channel_writer=[(ChannelWriteEntry(channel='branch:to:sql_generator', value=None, skip_none=False, mapper=None), 'sql_generator'), (ChannelWriteEntry(channel='branch:to:final_answer', value=None, skip_none=False, mapper=None), 'final_answer')])", "run": "None", "context": "<_contextvars.Context object at 0x10fd43f00>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/_internal/_runnable.py", "lineno": 474, "name": "ainvoke", "locals": {"self": "_route(tags=None, recurse=True, explode_args=False, func_accepts={'config': ('N/A', <class 'inspect._empty'>)}, _is_channel_writer=[(ChannelWriteEntry(channel='branch:to:sql_generator', value=None, skip_none=False, mapper=None), 'sql_generator'), (ChannelWriteEntry(channel='branch:to:final_answer', value=None, skip_none=False, mapper=None), 'final_answer')])", "input": "{'intent': 'unknown', 'thoughts': [], 'messages': []}", "config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n}", "kwargs": "{\n    'writer': <function CompiledStateGraph.attach_branch.<locals>.get_writes at 0x10fd68900>,\n    'reader': functools.partial(<function ChannelRead.do_read at 0x10e513560>, select=['question', 'answer', 'is_final', 'messages', 'revision_needed', 'thoughts'], fresh=True, mapper=None),\n    'config': {\n        'configurable': {\n            '__pregel_runtime': Runtime(\n                context=None,\n                store=None,\n                stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n                previous=None\n            ),\n            '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n            '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n            '__pregel_checkpointer': None,\n            'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n            'checkpoint_id': None,\n            'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n            '__pregel_scratchpad': PregelScratchpad(\n                step=1,\n                stop=25,\n                call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n                interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n                get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n                resume=[],\n                subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n            ),\n            '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n        },\n        'metadata': {\n            'langgraph_step': 1,\n            'langgraph_node': 'intent_classifier',\n            'langgraph_triggers': ('branch:to:intent_classifier',),\n            'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n            'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n        },\n        'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n    }\n}", "args": "({'intent': 'unknown', 'thoughts': [], 'messages': []},)", "runtime": "Runtime(\n    context=None,\n    store=None,\n    stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n    previous=None\n)", "kw": "'config'", "runtime_key": "'N/A'", "default": "<class 'inspect._empty'>", "kw_value": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/graph/_branch.py", "lineno": 191, "name": "_aroute", "locals": {"self": "BranchSpec(\n    path=route_after_intent_classification(tags=None, recurse=True, explode_args=False, func_accepts={}),\n    ends={'sql_generator': 'sql_generator', 'final_answer': 'final_answer'},\n    input_schema=<class 'src.schemas.agent_schemas.GraphState'>\n)", "input": "{'intent': 'unknown', 'thoughts': [], 'messages': []}", "config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n}", "reader": "functools.partial(<function ChannelRead.do_read at 0x10e513560>, select=['question', 'answer', 'is_final', 'messages', 'revision_needed', 'thoughts'], fresh=True, mapper=None)", "writer": "<function CompiledStateGraph.attach_branch.<locals>.get_writes at 0x10fd68900>", "value": "{'question': '임직원 목록 조회', 'messages': [], 'thoughts': []}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langgraph/_internal/_runnable.py", "lineno": 465, "name": "ainvoke", "locals": {"self": "route_after_intent_classification(tags=None, recurse=True, explode_args=False, func_accepts={})", "input": "{'question': '임직원 목록 조회', 'messages': [], 'thoughts': []}", "config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>\n}", "kwargs": "{}", "args": "({'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},)", "runtime": "Runtime(\n    context=None,\n    store=None,\n    stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n    previous=None\n)", "callback_manager": "<langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fa70a70>", "run_manager": "<langchain_core.callbacks.manager.AsyncCallbackManagerForChainRun object at 0x10fc941a0>", "child_config": "{\n    'configurable': {\n        '__pregel_runtime': Runtime(\n            context=None,\n            store=None,\n            stream_writer=<function Pregel.astream.<locals>.stream_writer at 0x10fd6a520>,\n            previous=None\n        ),\n        '__pregel_task_id': '50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_send': <built-in method extend of collections.deque object at 0x10fdbd120>,\n        '__pregel_read': functools.partial(<function local_read at 0x10e51cae0>, PregelScratchpad(step=1, stop=25, call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>, interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>, get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>, resume=[], subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>), {'question': <langgraph.channels.last_value.LastValue object at 0x10fd5dd00>, 'answer': <langgraph.channels.last_value.LastValue object at 0x10fd5d3c0>, 'is_final': <langgraph.channels.last_value.LastValue object at 0x10fd5d540>, 'messages': <langgraph.channels.binop.BinaryOperatorAggregate object at 0x10fd5ea80>, 'revision_needed': <langgraph.channels.last_value.LastValue object at 0x10fd534c0>, 'thoughts': <langgraph.channels.last_value.LastValue object at 0x10fd51500>, '__start__': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51740>, '__pregel_tasks': <langgraph.channels.topic.Topic object at 0x10fd51f80>, 'branch:to:intent_classifier': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd51940>, 'branch:to:sql_generator': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd53cc0>, 'branch:to:extract_thoughts': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd50680>, 'branch:to:tools': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd933c0>, 'branch:to:reflection': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93440>, 'branch:to:sql_executor': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93400>, 'branch:to:final_answer': <langgraph.channels.ephemeral_value.EphemeralValue object at 0x10fd93980>}, {}, PregelTaskWrites(path=('__pregel_pull', 'intent_classifier'), name='intent_classifier', writes=deque([('thoughts', []), ('messages', []), ('__error__', KeyError('intent'))]), triggers=('branch:to:intent_classifier',))),\n        '__pregel_checkpointer': None,\n        'checkpoint_map': {'': '1f099c70-b311-6376-8000-49abfc1337d9'},\n        'checkpoint_id': None,\n        'checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199',\n        '__pregel_scratchpad': PregelScratchpad(\n            step=1,\n            stop=25,\n            call_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda2f80>,\n            interrupt_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31c0>,\n            get_null_resume=<function _scratchpad.<locals>.get_null_resume at 0x10fdb8040>,\n            resume=[],\n            subgraph_counter=<langgraph.pregel._algo.LazyAtomicCounter object at 0x10fda31f0>\n        ),\n        '__pregel_call': functools.partial(<function _acall at 0x10e5a23e0>, <weakref at 0x10fdb66b0; to 'PregelExecutableTask' at 0x10fc47800>, stream=False, retry_policy=None, futures=<weakref at 0x10fdb5990; to 'FuturesDict' at 0x10fdb5a40>, schedule_task=<bound method AsyncPregelLoop.aaccept_push of <langgraph.pregel._loop.AsyncPregelLoop object at 0x10fda2b70>>, submit=<weakref at 0x10fd8d150; to 'AsyncBackgroundExecutor' at 0x10fda2e40>, loop=<uvloop.Loop running=True closed=False debug=False>)\n    },\n    'metadata': {\n        'langgraph_step': 1,\n        'langgraph_node': 'intent_classifier',\n        'langgraph_triggers': ('branch:to:intent_classifier',),\n        'langgraph_path': ('__pregel_pull', 'intent_classifier'),\n        'langgraph_checkpoint_ns': 'intent_classifier:50cf300f-0393-6ed4-0605-bb93aca3b199'\n    },\n    'callbacks': <langchain_core.callbacks.manager.AsyncCallbackManager object at 0x10fda2b10>\n}", "coro": "<coroutine object run_in_executor at 0x10fda4160>", "run": "None", "context": "<_contextvars.Context object at 0x10fdc4800>"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langchain_core/runnables/config.py", "lineno": 611, "name": "run_in_executor", "locals": {"executor_or_config": "None", "func": "<function route_after_intent_classification at 0x10fd3bc40>", "args": "({'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},)", "kwargs": "{}", "wrapper": "<function run_in_executor.<locals>.wrapper at 0x10fdb9080>"}}, {"filename": "/Users/jayhan/.local/share/uv/python/cpython-3.12.7-macos-aarch64-none/lib/python3.12/concurrent/futures/thread.py", "lineno": 58, "name": "run", "locals": {"self": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/langchain_core/runnables/config.py", "lineno": 602, "name": "wrapper", "locals": {"args": "({'question': '임직원 목록 조회', 'messages': [], 'thoughts': []},)", "func": "<function route_after_intent_classification at 0x10fd3bc40>", "kwargs": "{}"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/services/text_to_sql_agent.py", "lineno": 247, "name": "route_after_intent_classification", "locals": {"state": "{'question': '임직원 목록 조회', 'messages': [], 'thoughts': []}"}}], "is_group": false, "exceptions": []}]}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:21:56"}
{"event": "WatchFiles detected changes in 'src/schemas/agent_schemas.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:21:56"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:56"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:57"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:21:57", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:57"}
{"event": "Finished server process [30381]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:57"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:21:57"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:21:58"}
{"event": "Started server process [30491]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:58"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:58"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:21:58", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:21:58"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:22:16"}
{"event": "WatchFiles detected changes in 'src/api/endpoints.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:22:16"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:16"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:16"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:22:16", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:16"}
{"event": "Finished server process [30491]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:16"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:22:17"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:22:17"}
{"event": "Started server process [30525]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:18"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:18"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:22:18", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:22:18"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "text_to_sql_agent.py", "lineno": 73, "func_name": "intent_classifier_node"}
{"intent": "unknown", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "text_to_sql_agent.py", "lineno": 86, "func_name": "intent_classifier_node"}
{"intent": "unknown", "event": "Routing decision: after intent classification", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "text_to_sql_agent.py", "lineno": 248, "func_name": "route_after_intent_classification"}
{"event": "Executing node: final_answer", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "text_to_sql_agent.py", "lineno": 209, "func_name": "final_answer_node"}
{"final_answer": "I'm sorry, I didn't understand your question. ", "event": "Final answer generation complete", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "text_to_sql_agent.py", "lineno": 239, "func_name": "final_answer_node"}
{"final_answer": "I'm sorry, I didn't understand your question. ", "thoughts": [], "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-25 13:22:50", "filename": "endpoints.py", "lineno": 52, "func_name": "invoke_agent"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "WatchFiles detected changes in 'src/schemas/agent_schemas.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:25:35"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:25:35", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "Finished server process [30525]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:25:35"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:25:36"}
{"event": "Started server process [30873]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:37"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:37"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:25:37", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:25:37"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:26:53"}
{"event": "WatchFiles detected changes in 'src/services/text_to_sql_agent.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:26:53"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:53"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:53"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:26:53", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:53"}
{"event": "Finished server process [30873]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:53"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:26:54"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:26:54"}
{"event": "Started server process [31015]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:55"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:55"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:26:55", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:26:55"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:28:40"}
{"event": "WatchFiles detected changes in 'src/services/text_to_sql_agent.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:28:40"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:40"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:40"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:28:40", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:40"}
{"event": "Finished server process [31015]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:40"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:28:41"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:28:42"}
{"event": "Started server process [31204]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:42"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:42"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:28:42", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:28:42"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:29:41", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:29:41", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 13:29:41", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 13:29:41", "filename": "text_to_sql_agent.py", "lineno": 73, "func_name": "intent_classifier_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:29:43"}
{"intent": "sql_generation", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 13:29:43", "filename": "text_to_sql_agent.py", "lineno": 89, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "Routing decision: after intent classification", "level": "info", "timestamp": "2025-09-25 13:29:43", "filename": "text_to_sql_agent.py", "lineno": 259, "func_name": "route_after_intent_classification"}
{"event": "Executing node: sql_generator", "level": "info", "timestamp": "2025-09-25 13:29:43", "filename": "text_to_sql_agent.py", "lineno": 100, "func_name": "sql_generator_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:29:47"}
{"event": "SQL generation tool call successful", "level": "info", "timestamp": "2025-09-25 13:29:47", "filename": "text_to_sql_agent.py", "lineno": 128, "func_name": "sql_generator_node"}
{"event": "Executing node: extract_thoughts", "level": "info", "timestamp": "2025-09-25 13:29:47", "filename": "text_to_sql_agent.py", "lineno": 136, "func_name": "extract_thoughts_node"}
{"event": "Extracted thought: The user's question '임직원 목록 조회' translates to 'Retrieve the employee list'. To achieve this, we need to focus on the 'employees' table which contains the employee information. The relevant column in this table is 'name', which we will select to list all employees.", "level": "info", "timestamp": "2025-09-25 13:29:47", "filename": "text_to_sql_agent.py", "lineno": 145, "func_name": "extract_thoughts_node"}
{"event": "Thinking: The user's question '임직원 목록 조회' translates to 'Retrieve the employee list'. To achieve this, we need to focus on the 'employees' table which contains the employee information. The relevant column in this table is 'name', which we will select to list all employees.", "level": "info", "timestamp": "2025-09-25 13:29:47", "filename": "text_to_sql_agent.py", "lineno": 28, "func_name": "think"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:29:49"}
{"event": "Executing node: reflection", "level": "info", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 152, "func_name": "reflection_node"}
{"event": "No SQL query found or query starts with error, skipping reflection.", "level": "warning", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 167, "func_name": "reflection_node"}
{"event": "Routing decision: after SQL reflection", "level": "info", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 267, "func_name": "route_after_reflection"}
{"event": "Improvements suggested, re-routing to sql_generator", "level": "info", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 270, "func_name": "route_after_reflection"}
{"sql_query": null, "event": "Executing node: sql_executor", "level": "info", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 202, "func_name": "sql_executor_node"}
{"error": "expected string or bytes-like object, got 'NoneType'", "event": "Error during SQL execution", "level": "error", "timestamp": "2025-09-25 13:29:49", "filename": "text_to_sql_agent.py", "lineno": 210, "func_name": "sql_executor_node", "exception": [{"exc_type": "TypeError", "exc_value": "expected string or bytes-like object, got 'NoneType'", "exc_notes": [], "syntax_error": null, "is_cause": false, "frames": [{"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/src/services/text_to_sql_agent.py", "lineno": 205, "name": "sql_executor_node", "locals": {"state": "{\n    'question': '임직원 목록 조회',\n    'db_schema': 'Table departments:\\n  - id integer\\n  - name text\\n  - manager text\\nTable employee_'+127,\n    'db_connection': <sqlalchemy.orm.session.AsyncSession object at 0x10e5d9ee0>,\n    'intent': 'sql_generation',\n    'sql_query': None,\n    'reflection': [\n        'An error occurred during the SQL generation step. Please check the prompt again.'+12\n    ],\n    'reflection_history': [],\n    'execution_result': None,\n    'final_answer': None,\n    'messages': [\n        AIMessage(\n            content='',\n            additional_kwargs={\n                'tool_calls': [\n                    {\n                        'id': 'call_vmn5JAFcBHsJGWz01m7UGfjq',\n                        'function': {\n                            'arguments': '{\"thought\": \"The user\\'s question \\'임직원 목록 조회\\' translates to \\'Retrieve the employe'+199,\n                            'name': 'think'\n                        },\n                        'type': 'function'\n                    },\n                    {\n                        'id': 'call_1F67o1jW3B3QA5JUrG49Tppn',\n                        'function': {\n                            'arguments': '{\"question\": \"임직원 목록 조회\", \"db_schema\": \"Table departments:\\\\n- id integer\\\\n- name'+162,\n                            'name': 'generate_sql_query'\n                        },\n                        'type': 'function'\n                    }\n                ],\n                'refusal': None\n            },\n            response_metadata={\n                'token_usage': {\n                    'completion_tokens': 155,\n                    'prompt_tokens': 332,\n                    'total_tokens': 487,\n                    'completion_tokens_details': {\n                        'accepted_prediction_tokens': 0,\n                        'audio_tokens': 0,\n                        'reasoning_tokens': 0,\n                        'rejected_prediction_tokens': 0\n                    },\n                    'prompt_tokens_details': {\n                        'audio_tokens': 0,\n                        'cached_tokens': 0\n                    }\n                },\n                'model_name': 'gpt-4o-2024-08-06',\n                'system_fingerprint': 'fp_cbf1785567',\n                'id': 'chatcmpl-CJXtw1sN5BQmtxuZ3dom9qlUrYkfK',\n                'service_tier': 'default',\n                'finish_reason': 'tool_calls',\n                'logprobs': None\n            },\n            id='run--ea61448e-9c79-47b3-81f1-79ed72fd61e7-0',\n            tool_calls=[\n                {\n                    'name': 'think',\n                    'args': {\n                        'thought': \"The user's question '임직원 목록 조회' translates to 'Retrieve the employee list'. To a\"+184\n                    },\n                    'id': 'call_vmn5JAFcBHsJGWz01m7UGfjq',\n                    'type': 'tool_call'\n                },\n                {\n                    'name': 'generate_sql_query',\n                    'args': {\n                        'question': '임직원 목록 조회',\n                        'db_schema': 'Table departments:\\n- id integer\\n- name text\\n- manager text\\nTable employee_depart'+110\n                    },\n                    'id': 'call_1F67o1jW3B3QA5JUrG49Tppn',\n                    'type': 'tool_call'\n                }\n            ],\n            usage_metadata={\n                'input_tokens': 332,\n                'output_tokens': 155,\n                'total_tokens': 487,\n                'input_token_details': {'audio': 0, 'cache_read': 0},\n                'output_token_details': {'audio': 0, 'reasoning': 0}\n            }\n        ),\n        ToolMessage(\n            content=\"Thought recorded: The user's question '임직원 목록 조회' translates to 'Retrieve the em\"+202,\n            name='think',\n            id='d6ae38ec-a67e-4b0a-a5cf-893e081c896e',\n            tool_call_id='call_vmn5JAFcBHsJGWz01m7UGfjq'\n        ),\n        ToolMessage(\n            content=\"query='SELECT e.id, e.name FROM employees e;'\",\n            name='generate_sql_query',\n            id='6b782fe5-3b55-4e4b-a85e-2f5868dadaf7',\n            tool_call_id='call_1F67o1jW3B3QA5JUrG49Tppn'\n        )\n    ],\n    ... +2\n}", "session": "<sqlalchemy.orm.session.AsyncSession object at 0x10e5d9ee0>", "e": "TypeError(\"expected string or bytes-like object, got 'NoneType'\")"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/sql/_elements_constructors.py", "lineno": 1680, "name": "text", "locals": {"text": "None"}}, {"filename": "/Users/jayhan/workspaces/integrate-langgraph-pydanticai/.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py", "lineno": 2321, "name": "__init__", "locals": {"self": "<sqlalchemy.sql.elements.TextClause object at 0x10e613860>", "text": "None", "repl": "<function TextClause.__init__.<locals>.repl at 0x10d3fb600>"}}], "is_group": false, "exceptions": []}]}
{"event": "Executing node: final_answer", "level": "info", "timestamp": "2025-09-25 13:29:50", "filename": "text_to_sql_agent.py", "lineno": 216, "func_name": "final_answer_node"}
{"execution_result": "Error executing query: expected string or bytes-like object, got 'NoneType'", "event": "Error in query execution result", "level": "error", "timestamp": "2025-09-25 13:29:50", "filename": "text_to_sql_agent.py", "lineno": 231, "func_name": "final_answer_node"}
{"final_answer": "An error occurred while executing the query. ", "event": "Final answer generation complete", "level": "info", "timestamp": "2025-09-25 13:29:50", "filename": "text_to_sql_agent.py", "lineno": 250, "func_name": "final_answer_node"}
{"final_answer": "An error occurred while executing the query. ", "thoughts": ["The user's question '임직원 목록 조회' translates to 'Retrieve the employee list'. To achieve this, we need to focus on the 'employees' table which contains the employee information. The relevant column in this table is 'name', which we will select to list all employees."], "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-25 13:29:50", "filename": "endpoints.py", "lineno": 52, "func_name": "invoke_agent"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:48"}
{"event": "WatchFiles detected changes in 'src/services/text_to_sql_agent.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:32:48"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:48"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:49"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:32:49", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:49"}
{"event": "Finished server process [31204]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:49"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:49"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:50"}
{"event": "Started server process [31634]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:50"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:50"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:32:50", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:50"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:54"}
{"event": "WatchFiles detected changes in 'src/services/text_to_sql_agent.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:32:54"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:54"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:54"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:32:54", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:54"}
{"event": "Finished server process [31634]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:54"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:55"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:32:55"}
{"event": "Started server process [31642]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:56"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:56"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:32:56", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:32:56"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:33:20", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:33:20", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 13:33:20", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 13:33:20", "filename": "text_to_sql_agent.py", "lineno": 73, "func_name": "intent_classifier_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:33:23"}
{"intent": "sql_generation", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 13:33:23", "filename": "text_to_sql_agent.py", "lineno": 89, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "Routing decision: after intent classification", "level": "info", "timestamp": "2025-09-25 13:33:23", "filename": "text_to_sql_agent.py", "lineno": 259, "func_name": "route_after_intent_classification"}
{"event": "Executing node: sql_generator", "level": "info", "timestamp": "2025-09-25 13:33:23", "filename": "text_to_sql_agent.py", "lineno": 100, "func_name": "sql_generator_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:33:27"}
{"event": "SQL generation tool call successful", "level": "info", "timestamp": "2025-09-25 13:33:27", "filename": "text_to_sql_agent.py", "lineno": 128, "func_name": "sql_generator_node"}
{"event": "Executing node: extract_thoughts", "level": "info", "timestamp": "2025-09-25 13:33:27", "filename": "text_to_sql_agent.py", "lineno": 136, "func_name": "extract_thoughts_node"}
{"event": "Extracted thought: The user's question '임직원 목록 조회' translates to 'List of employees'. This means we need information from the 'employees' table. We will utilize the 'employees' table to extract all employee records. The relevant columns here are 'id', 'name', and 'salary'.", "level": "info", "timestamp": "2025-09-25 13:33:27", "filename": "text_to_sql_agent.py", "lineno": 145, "func_name": "extract_thoughts_node"}
{"event": "Thinking: The user's question '임직원 목록 조회' translates to 'List of employees'. This means we need information from the 'employees' table. We will utilize the 'employees' table to extract all employee records. The relevant columns here are 'id', 'name', and 'salary'.", "level": "info", "timestamp": "2025-09-25 13:33:27", "filename": "text_to_sql_agent.py", "lineno": 28, "func_name": "think"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:33:29"}
{"event": "Executing node: reflection", "level": "info", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 152, "func_name": "reflection_node"}
{"event": "No SQL query found or query starts with error, skipping reflection.", "level": "warning", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 167, "func_name": "reflection_node"}
{"event": "Routing decision: after SQL reflection", "level": "info", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 267, "func_name": "route_after_reflection"}
{"reflections": ["An error occurred during the SQL generation step. Please check the prompt again. Error: None"], "event": "Reflection found issues. Halting execution.", "level": "warning", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 271, "func_name": "route_after_reflection"}
{"event": "Executing node: final_answer", "level": "info", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 216, "func_name": "final_answer_node"}
{"final_answer": "I'm sorry, I couldn't find an answer to your question.", "event": "Final answer generation complete", "level": "info", "timestamp": "2025-09-25 13:33:29", "filename": "text_to_sql_agent.py", "lineno": 250, "func_name": "final_answer_node"}
{"final_answer": "I'm sorry, I couldn't find an answer to your question.", "thoughts": ["The user's question '임직원 목록 조회' translates to 'List of employees'. This means we need information from the 'employees' table. We will utilize the 'employees' table to extract all employee records. The relevant columns here are 'id', 'name', and 'salary'."], "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-25 13:33:29", "filename": "endpoints.py", "lineno": 52, "func_name": "invoke_agent"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:34:53"}
{"event": "WatchFiles detected changes in 'src/schemas/agent_schemas.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:34:53"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:34:53"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:34:53"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:34:53", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:34:53"}
{"event": "Finished server process [31642]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:34:53"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:34:54"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:34:55"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:35:55"}
{"event": "WatchFiles detected changes in 'src/services/text_to_sql_agent.py'. Reloading...", "logger": "uvicorn.error", "level": "warning", "timestamp": "2025-09-25 13:35:55"}
{"event": "3 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 13:35:56"}
{"event": "Started server process [31965]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:35:56"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:35:56"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 13:35:56", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:35:56"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 13:36:23", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 13:36:23", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 13:36:23", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 13:36:23", "filename": "text_to_sql_agent.py", "lineno": 17, "func_name": "intent_classifier_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:36:24"}
{"intent": "sql_generation", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 13:36:24", "filename": "text_to_sql_agent.py", "lineno": 33, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "Routing decision: after intent classification", "level": "info", "timestamp": "2025-09-25 13:36:24", "filename": "text_to_sql_agent.py", "lineno": 187, "func_name": "route_after_intent_classification"}
{"event": "Executing node: sql_generator", "level": "info", "timestamp": "2025-09-25 13:36:24", "filename": "text_to_sql_agent.py", "lineno": 44, "func_name": "sql_generator_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:36:28"}
{"thought": "The user is asking for a list of employees. To retrieve this information, I will need to utilize the 'employees' table as it contains basic employee details such as their ID and name. Since the request does not specify any relationship with departments or additional details from other tables, I will focus solely on fetching data from the 'employees' table. Specifically, I will select the columns 'id' and 'name' from the 'employees' table.", "sql_query": "SELECT id, name FROM employees;", "event": "SQL generation successful", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 72, "func_name": "sql_generator_node"}
{"event": "Executing node: reflection", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 87, "func_name": "reflection_node"}
{"event": "SQL query syntax validation passed (EXPLAIN).", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 104, "func_name": "reflection_node"}
{"event": "Reflection result: Query is valid.", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 113, "func_name": "reflection_node"}
{"event": "Routing decision: after SQL reflection", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 195, "func_name": "route_after_reflection"}
{"event": "Query is valid, routing to sql_executor", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 202, "func_name": "route_after_reflection"}
{"sql_query": "SELECT id, name FROM employees;", "event": "Executing node: sql_executor", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 125, "func_name": "sql_executor_node"}
{"result_count": 40, "event": "SQL execution successful", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 135, "func_name": "sql_executor_node"}
{"event": "Executing node: final_answer", "level": "info", "timestamp": "2025-09-25 13:36:28", "filename": "text_to_sql_agent.py", "lineno": 144, "func_name": "final_answer_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 13:36:30"}
{"final_answer": "임직원 목록은 다음과 같습니다:\n1. Alice\n2. Bob\n3. Charlie\n4. David\n5. Employee_5\n6. Employee_6\n7. Employee_7\n8. Employee_8\n9. Employee_9\n10. Employee_10\n11. Employee_11\n12. Employee_12\n13. Employee_13\n14. Employee_14\n15. Employee_15\n16. Employee_16\n17. Employee_17\n18. Employee_18\n19. Employee_19\n20. Employee_20\n21. Employee_21\n22. Employee_22\n23. Employee_23\n24. Employee_24\n25. Employee_25\n26. Employee_26\n27. Employee_27\n28. Employee_28\n29. Employee_29\n30. Employee_30\n31. Employee_31\n32. Employee_32\n33. Employee_33\n34. Employee_34\n35. Employee_35\n36. Employee_36\n37. Employee_37\n38. Employee_38\n39. Employee_39\n40. Employee_40", "event": "Final answer generation complete", "level": "info", "timestamp": "2025-09-25 13:36:30", "filename": "text_to_sql_agent.py", "lineno": 178, "func_name": "final_answer_node"}
{"final_answer": "임직원 목록은 다음과 같습니다:\n1. Alice\n2. Bob\n3. Charlie\n4. David\n5. Employee_5\n6. Employee_6\n7. Employee_7\n8. Employee_8\n9. Employee_9\n10. Employee_10\n11. Employee_11\n12. Employee_12\n13. Employee_13\n14. Employee_14\n15. Employee_15\n16. Employee_16\n17. Employee_17\n18. Employee_18\n19. Employee_19\n20. Employee_20\n21. Employee_21\n22. Employee_22\n23. Employee_23\n24. Employee_24\n25. Employee_25\n26. Employee_26\n27. Employee_27\n28. Employee_28\n29. Employee_29\n30. Employee_30\n31. Employee_31\n32. Employee_32\n33. Employee_33\n34. Employee_34\n35. Employee_35\n36. Employee_36\n37. Employee_37\n38. Employee_38\n39. Employee_39\n40. Employee_40", "thoughts": ["The user is asking for a list of employees. To retrieve this information, I will need to utilize the 'employees' table as it contains basic employee details such as their ID and name. Since the request does not specify any relationship with departments or additional details from other tables, I will focus solely on fetching data from the 'employees' table. Specifically, I will select the columns 'id' and 'name' from the 'employees' table."], "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-25 13:36:30", "filename": "endpoints.py", "lineno": 52, "func_name": "invoke_agent"}
{"event": "Shutting down", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:41:56"}
{"event": "Waiting for application shutdown.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:41:56"}
{"event": "🏁 애플리케이션 종료, DB 엔진 연결 해제", "level": "info", "timestamp": "2025-09-25 13:41:56", "filename": "connection.py", "lineno": 25, "func_name": "lifespan"}
{"event": "Application shutdown complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:41:56"}
{"event": "Finished server process [31965]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:41:56"}
{"event": "Stopping reloader process [30375]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 13:41:56"}
{"event": "Will watch for changes in these directories: ['/Users/jayhan/workspaces/integrate-langgraph-pydanticai']", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:56:59"}
{"event": "Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:56:59"}
{"event": "Started reloader process [11904] using WatchFiles", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:56:59"}
{"event": "Started server process [12246]", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:57:00"}
{"event": "Waiting for application startup.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:57:00"}
{"event": "🚀 애플리케이션 시작", "level": "info", "timestamp": "2025-09-25 14:57:00", "filename": "connection.py", "lineno": 23, "func_name": "lifespan"}
{"event": "Application startup complete.", "logger": "uvicorn.error", "level": "info", "timestamp": "2025-09-25 14:57:00"}
{"event": "950 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 14:57:11"}
{"event": "14 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 14:57:14"}
{"event": "6 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 14:57:16"}
{"question": "임직원 목록 조회", "event": "에이전트 호출 시작", "level": "info", "timestamp": "2025-09-25 14:57:21", "filename": "endpoints.py", "lineno": 26, "func_name": "invoke_agent"}
{"event": "데이터베이스 스키마 조회 시작", "level": "info", "timestamp": "2025-09-25 14:57:21", "filename": "utils.py", "lineno": 11, "func_name": "get_db_schema"}
{"tables": ["departments", "employee_department", "employees"], "event": "데이터베이스 스키마 조회 성공", "level": "info", "timestamp": "2025-09-25 14:57:21", "filename": "utils.py", "lineno": 39, "func_name": "get_db_schema"}
{"event": "Executing node: intent_classifier", "level": "info", "timestamp": "2025-09-25 14:57:21", "filename": "text_to_sql_agent.py", "lineno": 16, "func_name": "intent_classifier_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 14:57:23"}
{"intent": "sql_generation", "event": "Intent classification complete", "level": "info", "timestamp": "2025-09-25 14:57:23", "filename": "text_to_sql_agent.py", "lineno": 32, "func_name": "intent_classifier_node"}
{"intent": "sql_generation", "event": "Routing decision: after intent classification", "level": "info", "timestamp": "2025-09-25 14:57:23", "filename": "text_to_sql_agent.py", "lineno": 195, "func_name": "route_after_intent_classification"}
{"event": "Executing node: sql_generator", "level": "info", "timestamp": "2025-09-25 14:57:23", "filename": "text_to_sql_agent.py", "lineno": 45, "func_name": "sql_generator_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 14:57:26"}
{"thought": "The user wants to retrieve the list of employees. The relevant table for retrieving this information is the 'employees' table, which contains employee details like 'id', 'name', and 'salary'. Since the user did not specify filtering or additional details from other tables, I will select all columns from the 'employees' table to provide a comprehensive list of employees.", "sql_query": "SELECT * FROM employees;", "event": "SQL generation successful", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 73, "func_name": "sql_generator_node"}
{"event": "Executing node: reflection", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 90, "func_name": "reflection_node"}
{"event": "SQL query syntax validation passed (EXPLAIN).", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 109, "func_name": "reflection_node"}
{"event": "Reflection result: Query is valid.", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 118, "func_name": "reflection_node"}
{"event": "Routing decision: after SQL reflection", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 203, "func_name": "route_after_reflection"}
{"event": "Query is valid, routing to sql_executor", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 213, "func_name": "route_after_reflection"}
{"sql_query": "SELECT * FROM employees;", "event": "Executing node: sql_executor", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 132, "func_name": "sql_executor_node"}
{"result_count": 40, "event": "SQL execution successful", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 142, "func_name": "sql_executor_node"}
{"event": "Executing node: final_answer", "level": "info", "timestamp": "2025-09-25 14:57:26", "filename": "text_to_sql_agent.py", "lineno": 151, "func_name": "final_answer_node"}
{"event": "HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"", "logger": "httpx", "level": "info", "timestamp": "2025-09-25 14:57:28"}
{"final_answer": "현재 임직원 목록은 총 40명입니다. 주요 임직원으로는 Alice(급여: 80,000), Bob(급여: 90,000), Charlie(급여: 60,000), David(급여: 75,000) 등이 있으며, 그 외 여러 임직원이 포함되어 있습니다. 임직원들의 급여는 53,000에서 88,000까지 다양합니다.", "event": "Final answer generation complete", "level": "info", "timestamp": "2025-09-25 14:57:28", "filename": "text_to_sql_agent.py", "lineno": 185, "func_name": "final_answer_node"}
{"final_answer": "현재 임직원 목록은 총 40명입니다. 주요 임직원으로는 Alice(급여: 80,000), Bob(급여: 90,000), Charlie(급여: 60,000), David(급여: 75,000) 등이 있으며, 그 외 여러 임직원이 포함되어 있습니다. 임직원들의 급여는 53,000에서 88,000까지 다양합니다.", "thoughts": ["The user wants to retrieve the list of employees. The relevant table for retrieving this information is the 'employees' table, which contains employee details like 'id', 'name', and 'salary'. Since the user did not specify filtering or additional details from other tables, I will select all columns from the 'employees' table to provide a comprehensive list of employees."], "event": "에이전트 호출 완료", "level": "info", "timestamp": "2025-09-25 14:57:28", "filename": "endpoints.py", "lineno": 52, "func_name": "invoke_agent"}
{"event": "1 change detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 15:02:28"}
{"event": "2 changes detected", "logger": "watchfiles.main", "level": "info", "timestamp": "2025-09-25 15:02:30"}
